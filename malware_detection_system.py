import psutil
import time
import os
import logging
import smtplib
from email.message import EmailMessage
from dotenv import load_dotenv

def list_processes():
    # List all current processes
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'exe']):
        processes.append(proc.info)
    return processes

def check_for_malware(processes, signatures):
    threats = []
    for process in processes:
        if process['name'] in signatures:
            threats.append(process)
    return threats

def terminate_process(pid):
    try:
        p = psutil.Process(pid)
        p.terminate()
        logging.info(f"Terminated process {pid}")
    except psutil.NoSuchProcess:
        logging.error(f"No such process {pid}")
    except psutil.AccessDenied:
        logging.error(f"Access denied when trying to terminate process {pid}")

def import_credentials():
    # Check if the cred.env file exists
    if not os.path.isfile('projectcreds.env'):
        print("Error: cred.env file not found.")
        return None
    
    # Load variables from cred.env file
    load_dotenv('projectcreds.env')
    
    # Return a dictionary containing all the variables
    return dict(os.environ)

def send_alert(email, subject, content):
    msg = EmailMessage()
    msg.set_content(content)
    msg['Subject'] = subject
    msg['From'] = 'amazing.ayaan.20@gmail.com'
    msg['To'] = email

    with smtplib.SMTP('amazing.ayaan.20@gmail.com', 587) as s:
        s.starttls()
        s.login('your_email@example.com', 'your_password')
        s.send_message(msg)
        logging.info(f"Alert sent to {email} about {subject}")

def runner(signatures, check_interval=5):
    while True:
        processes = list_processes()
        threats = check_for_malware(processes, signatures)
        if threats:
            for threat in threats:
                print(f"Malicious program identified: {threat['name']} with PID {threat['pid']}")
                terminate_process(threat['pid'])
        time.sleep(check_interval) 

# Set up logging
logging.basicConfig(filename='malware_scanner.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

# Main execution logic
if __name__ == "__main__":
    malware_signatures = ['demo_virus', 'badware.exe', 'virus.exe']
    credentials = import_credentials()
    
    if credentials:
        print("Imported credentials:", credentials)
    
    runner(malware_signatures)
